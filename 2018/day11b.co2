
cell_level = function(cell_x, cell_y, grid_serial_number) {
	local rack_id = cell_x + 10;
	local initial_power_level = rack_id * cell_y;
	local power_level = initial_power_level + grid_serial_number;
	power_level = power_level * rack_id;
	local level = power_level / 100;
	level = level - (level/10*10);
	level = level - 5;
	return level;
};

solution = function(input) {
	local grid_serial_number = input;
	local cells = array(300 * 300);
	loop(local y=0, y<300, y=y+1){
		loop(local x=0, x<300, x=x+1){
			set(cells, y*300+x, cell_level(x,y,grid_serial_number));
		}
	}

	local best_x = 0;
	local best_y = 0;
	local best_size = 0;
	local best_value = 0;

	loop(local y=0, y<300, y=y+1){
		local prev = 0;
		loop(local x=0, x<300, x=x+1){
			local offset = x+y*300;
			local value = get(cells, offset);
			local current = value + prev;
			set(cells, offset, current);
			prev = current;
		}
	}
	loop(local x=0, x<300, x=x+1){
		local prev = 0;
		loop(local y=0, y<300, y=y+1){
			local offset = x+y*300;
			local value = get(cells, offset);
			local current = value + prev;
			set(cells, offset, current);
			prev = current;
		}
	}
	loop(local x=0, x<300, x=x+1){
		local left_x = 300 - x;
		print(string(x/3)+"%\r");
		loop(local y=0, y<300, y=y+1){
			local left_y = 300 - y;
			local max_size = left_x;
			if (max_size > 32) { max_size = 32; }
			if (left_y < max_size) { max_size = left_y };
			loop(local s=1, s<max_size, s=s+1){
				local x0 = x-1;
				local y0 = y-1;
				local x1 = x0+s;
				local y1 = y0+s;
				y0 = y0 * 300;
				y1 = y1 * 300;
				
				local c11 = get(cells, x1 + y1);
				local c10 = 0;
				local c01 = 0;
				local c00 = 0;
				if (x0 > 0){
					c10 = get(cells, x0 + y1);	
				}
				if (y0 > 0){
					c01 = get(cells, x1 + y0);
					if (x>0){
						c00 = get(cells, x0 + y0);
					}
				}
				local sum = c11 - c10 - c01 + c00;
				if(sum > best_value){
					best_value = sum;
					best_x = x;
					best_y = y;
					best_size = s;
				}
			}
		}
	}
	local best = array(3);
	set(best, 0, best_x);
	set(best, 1, best_y);
	set(best, 2, best_size);
	return best;
};

equals = function(a,b){
	return (get(a,0) == get(b,0)) * (get(a,1) == get(b,1)) * (get(a,2) == get(b,2));
};

cases = [
	{
		in: 18,
		out: [90,269,16]
	},
	{
		in: 42,
		out: [232,251,12]
	},
	{
		in: 7672,
		out: [22,18, 0]
	}
];
