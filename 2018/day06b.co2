
to_coord = function(array, id){
	local coord = object();
	set(coord, "x", get(array,0));
	set(coord, "y", get(array,1));
	return coord;
};

distance = function (coordA, x2, y2){
	local dX = getX(coordA) - x2;
	local dY = getY(coordA) - y2;
	if (dX < 0) { dX = -dX };
	if (dY < 0) { dY = -dY };
	return dX + dY;
};

getX = function (coord) { return get(coord, "x") };
getY = function (coord) { return get(coord, "y") };
by_count = function(coord) { 
	if (get(coord, "border")){
		return +1;
	} else {
		return -(get(coord, "count"));
	};
};

solution = function(input) {
	local range = get(input,"range");
	local points = get(input, "points");
	local coords = map(points, to_coord);
	local xsorted = order(coords, getX);
	local ysorted = order(coords, getY);
	local len = length(points);
	local last = len - 1;
	local min_x = getX(get(xsorted,0));
	local max_x = getX(get(xsorted,last));
	local min_y = getY(get(ysorted,0));
	local max_y = getY(get(ysorted,last));;

	local adjust = 1;
	min_x = min_x - adjust; min_y = min_y - adjust;
	max_x = max_x + adjust; max_y = max_y + adjust;

	local count = 0;

	loop(local y=min_y, y<=max_y, y=y+1){
		loop(local x=min_x, x<=max_x, x=x+1){
			local sum = 0;
			loop(local i=0, i<len, i=i+1){
				sum = sum + distance(get(coords, i), x, y);
			};
			if (sum < range){
				count = count + 1;
			}
		};
	};
	return count;
};

cases = [
	{
		in:{ 
			points: [
				[1, 1],
				[1, 6],
				[8, 3],
				[3, 4],
				[5, 5],
				[8, 9]
			],
			range: 32
		},
		out: 16
	},
	{
		in:{
			range:10000,
			points: [
				[268, 273],
				[211, 325],
				[320, 225],
				[320, 207],
				[109, 222],
				[267, 283],
				[119, 70],
				[138, 277],
				[202, 177],
				[251, 233],
				[305, 107],
				[230, 279],
				[243, 137],
				[74, 109],
				[56, 106],
				[258, 97],
				[248, 346],
				[71, 199],
				[332, 215],
				[208, 292],
				[154, 80],
				[74, 256],
				[325, 305],
				[174, 133],
				[148, 51],
				[112, 71],
				[243, 202],
				[136, 237],
				[227, 90],
				[191, 145],
				[345, 133],
				[340, 299],
				[322, 256],
				[86, 323],
				[341, 310],
				[342, 221],
				[50, 172],
				[284, 160],
				[267, 142],
				[244, 153],
				[131, 147],
				[245, 323],
				[42, 241],
				[90, 207],
				[245, 167],
				[335, 106],
				[299, 158],
				[181, 186],
				[349, 286],
				[327, 108]
			]
		},
		out:46542
	}
];
