
parse = function(raw){
	local parts = strsplit(raw," ");
	local step = get(parts,7);
	local requires = get(parts,1);
	local result = array(2);
	set(result, 0, step);
	set(result, 1, requires);
	return result;
};

id_to_cost = function(id){
	return get(id,0) - get("A",0) + 1;
};

make_schedule = function(dependencies, base_cost){
	local schedule = object();
	local getTask = function(id){
		local task = get(schedule, id);
		if (task != void) { return task };
		task = object();
		set(task, "id", id);
		set(task, "count", 0);
		set(task, "trigger", []);
		set(task, "in_progress", false);
		set(task, "cost", base_cost + id_to_cost(id));
		set(schedule, id, task);
		return task;
	};
	local increment = function(id){
		local task = getTask(id);
		set(task, "count", get(task, "count") + 1);
	};
	local trigger = function(id, target){
		local task = getTask(id);
		local triggers = get(task, "trigger");
		local new = array(1);
		set(new,0,target);
		set(task, "trigger", triggers + new);
	};
	loop(local i=0, i<length(dependencies), i=i+1){
		local dependency = get(dependencies, i);
		local step = get(dependency,0);
		local requires = get(dependency,1);
		increment(step);
		trigger(requires, step);
	};
	return schedule;
};

solution = function(input) {
	local workers_count = get(input, "workers");
	local base_cost = get(input, "base_cost");
	local parsed = map(get(input, "dependencies"), parse);
	local schedule = make_schedule(parsed, base_cost);
	local list = map(properties(schedule), (function(x,_,c){get(c,x)}), schedule);
	local finish_order = "";
	local workers = array(workers_count);
	local time = 0;
	loop {

		local runable_i = 0;
		local runable = filter(list, can_run);
		runable = order(runable, (function(x){get(x,"id")}));
		loop (local i=0, i<workers_count, i=i+1){
			local task = get(workers, i);
			if (task == void){
				if (runable_i < length(runable)){
					task = get(runable, runable_i);
					runable_i = runable_i + 1;
					set(workers, i, task);
					set(task, "in_progress", true);
				}
			}
			if (task != void){
				local cost = get(task, "cost");
				if (cost > 0){
					cost = cost - 1;
					set(task, "cost", cost);
				}
				if (cost == 0){
					finish_task(task, schedule);
					set(workers, i, void);
					finish_order = finish_order + get(task, "id");
				}
			}
		}
		time = time + 1;
		if (find(list, incomplete) == void){
			break;
		}
	};
	return time;
};

finish_task = function(item, schedule){
	set(item, "in_progress", false);
	foreach(get(item, "trigger"), (function(key,value){
		local target = get(schedule, value);
		set(target, "count", get(target, "count")-1);
	}));
};

incomplete = function(item){
	return get(item, "cost") > 0;
};

can_run = function(item){
	if (get(item, "count") == 0){
		if (get(item, "in_progress") == false){
			if (get(item, "cost") > 0){
				return true;	
			}
		}
	}
	return false;
};

cases = [
	{
		in: {
			workers: 2,
			base_cost: 0,
			dependencies: [
				"Step C must be finished before step A can begin.",
				"Step C must be finished before step F can begin.",
				"Step A must be finished before step B can begin.",
				"Step A must be finished before step D can begin.",
				"Step B must be finished before step E can begin.",
				"Step D must be finished before step E can begin.",
				"Step F must be finished before step E can begin."
			]
		},
		out: 15
	},
	{
		in: {
			workers: 5,
			base_cost: 60,
			dependencies: [
				"Step A must be finished before step I can begin.",
				"Step M must be finished before step Q can begin.",
				"Step B must be finished before step S can begin.",
				"Step G must be finished before step N can begin.",
				"Step Y must be finished before step R can begin.",
				"Step E must be finished before step H can begin.",
				"Step K must be finished before step L can begin.",
				"Step H must be finished before step Z can begin.",
				"Step C must be finished before step P can begin.",
				"Step W must be finished before step U can begin.",
				"Step V must be finished before step L can begin.",
				"Step O must be finished before step N can begin.",
				"Step U must be finished before step I can begin.",
				"Step D must be finished before step P can begin.",
				"Step Q must be finished before step L can begin.",
				"Step F must be finished before step Z can begin.",
				"Step L must be finished before step N can begin.",
				"Step P must be finished before step S can begin.",
				"Step I must be finished before step S can begin.",
				"Step S must be finished before step R can begin.",
				"Step T must be finished before step N can begin.",
				"Step N must be finished before step X can begin.",
				"Step Z must be finished before step J can begin.",
				"Step R must be finished before step J can begin.",
				"Step J must be finished before step X can begin.",
				"Step E must be finished before step I can begin.",
				"Step T must be finished before step R can begin.",
				"Step I must be finished before step N can begin.",
				"Step K must be finished before step C can begin.",
				"Step B must be finished before step D can begin.",
				"Step K must be finished before step T can begin.",
				"Step E must be finished before step P can begin.",
				"Step F must be finished before step I can begin.",
				"Step O must be finished before step U can begin.",
				"Step I must be finished before step J can begin.",
				"Step S must be finished before step Z can begin.",
				"Step L must be finished before step J can begin.",
				"Step F must be finished before step T can begin.",
				"Step F must be finished before step P can begin.",
				"Step I must be finished before step T can begin.",
				"Step G must be finished before step S can begin.",
				"Step V must be finished before step U can begin.",
				"Step F must be finished before step R can begin.",
				"Step L must be finished before step R can begin.",
				"Step Y must be finished before step D can begin.",
				"Step M must be finished before step E can begin.",
				"Step U must be finished before step L can begin.",
				"Step C must be finished before step D can begin.",
				"Step W must be finished before step N can begin.",
				"Step S must be finished before step N can begin.",
				"Step O must be finished before step S can begin.",
				"Step B must be finished before step T can begin.",
				"Step V must be finished before step T can begin.",
				"Step S must be finished before step X can begin.",
				"Step V must be finished before step P can begin.",
				"Step F must be finished before step L can begin.",
				"Step P must be finished before step R can begin.",
				"Step D must be finished before step N can begin.",
				"Step C must be finished before step L can begin.",
				"Step O must be finished before step Q can begin.",
				"Step N must be finished before step Z can begin.",
				"Step Y must be finished before step L can begin.",
				"Step B must be finished before step K can begin.",
				"Step P must be finished before step Z can begin.",
				"Step V must be finished before step Z can begin.",
				"Step U must be finished before step J can begin.",
				"Step Q must be finished before step S can begin.",
				"Step H must be finished before step F can begin.",
				"Step E must be finished before step O can begin.",
				"Step D must be finished before step F can begin.",
				"Step D must be finished before step X can begin.",
				"Step L must be finished before step S can begin.",
				"Step Z must be finished before step R can begin.",
				"Step K must be finished before step X can begin.",
				"Step M must be finished before step V can begin.",
				"Step A must be finished before step M can begin.",
				"Step B must be finished before step W can begin.",
				"Step A must be finished before step P can begin.",
				"Step W must be finished before step Q can begin.",
				"Step R must be finished before step X can begin.",
				"Step M must be finished before step H can begin.",
				"Step F must be finished before step S can begin.",
				"Step K must be finished before step Q can begin.",
				"Step Y must be finished before step Q can begin.",
				"Step W must be finished before step S can begin.",
				"Step Q must be finished before step T can begin.",
				"Step K must be finished before step H can begin.",
				"Step K must be finished before step D can begin.",
				"Step E must be finished before step T can begin.",
				"Step Y must be finished before step E can begin.",
				"Step A must be finished before step O can begin.",
				"Step G must be finished before step E can begin.",
				"Step C must be finished before step O can begin.",
				"Step G must be finished before step H can begin.",
				"Step Y must be finished before step I can begin.",
				"Step V must be finished before step S can begin.",
				"Step B must be finished before step R can begin.",
				"Step B must be finished before step X can begin.",
				"Step V must be finished before step I can begin.",
				"Step N must be finished before step J can begin.",
				"Step H must be finished before step I can begin."
			]
		},
		out:898
	}
];
