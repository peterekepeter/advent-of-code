
to_coord = function(array, id){
	local coord = object();
	set(coord, "x", get(array,0));
	set(coord, "y", get(array,1));
	set(coord, "id", id);
	local letter="A"+"";
	set(letter, 0, get(letter,0) + id);
	set(coord, "letter", letter);
	set(coord, "count", 0);
	set(coord, "border", false);
	return coord;
};

distance_between_coords = function (coordA, coordB){
	local dX = getX(coordA) - getX(coordB);
	local dY = getY(coordA) - getY(coordB);
	if (dX < 0) { dX = -dX };
	if (dY < 0) { dY = -dY };
	return dX + dY;
};

distance = function (coordA, x2, y2){
	local dX = getX(coordA) - x2;
	local dY = getY(coordA) - y2;
	if (dX < 0) { dX = -dX };
	if (dY < 0) { dY = -dY };
	return dX + dY;
};

find_miminum = function(data, fun){
	local min_index = 0;
	local min_value = fun(get(data,0));
	loop (local i=1, i<length(data), i=i+1){
		local value = fun(get(data,i));
		if (value == min_value){
			min_index = void;
		} else if (value < min_value){
			min_value = value;
			min_index = i;
		};;
	};
	if (min_index == void){
		return void;
	}
	return get(data, min_index);
};

getX = function (coord) { return get(coord, "x") };
getY = function (coord) { return get(coord, "y") };
by_count = function(coord) { 
	if (get(coord, "border")){
		return +1;
	} else {
		return -(get(coord, "count"));
	};
};

solution = function(input) {
	local coords = map(input, to_coord);
	local xsorted = order(coords, getX);
	local ysorted = order(coords, getY);
	local len = length(input);
	local last = len - 1;
	local min_x = getX(get(xsorted,0));
	local max_x = getX(get(xsorted,last));
	local min_y = getY(get(ysorted,0));
	local max_y = getY(get(ysorted,last));;

	local adjust = 1;
	min_x = min_x - adjust; min_y = min_y - adjust;
	max_x = max_x + adjust; max_y = max_y + adjust;

	local find = function(coords, x, y){
		return find_miminum(coords, (function(coord){
			return distance(coord, x, y);
		}));
	};

	loop(local y=min_y, y<=max_y, y=y+1){
		local left = find(coords, min_x, y);
		if (left != void) { set(left, "border", true) };
		local right = find(coords, max_x, y);
		if (right != void) { set(right, "border", true) };
	}

	loop(local x=min_x, x<=max_x, x=x+1){
		local top = find(coords, x, min_y);
		if (top != void) { set(top, "border", true) };
		local bottom = find(coords, x, max_y);
		if (bottom != void) { set(bottom, "border", true) };
	}

	loop(local y=min_y, y<=max_y, y=y+1){
		local row = "";
		loop(local x=min_x, x<=max_x, x=x+1){
			local minimum = find_miminum(coords, (function(coord){
				return distance(coord, x, y);
			}));
			if (minimum != void){
				local id = get(minimum, "id");
				set(minimum, "count", get(minimum, "count") + 1);
			}
			if (minimum == void){
				row = row + ".";
			} else {
				row = row + get(minimum, "letter");
			}
		};
	};
	coords = order(coords, by_count);
	return get(get(coords,0), "count");
};

cases = [
	{
		in: [
			[1, 1],
			[1, 6],
			[8, 3],
			[3, 4],
			[5, 5],
			[8, 9]
		],
		out: 17
	},
	{
		in:[
			[268, 273],
			[211, 325],
			[320, 225],
			[320, 207],
			[109, 222],
			[267, 283],
			[119, 70],
			[138, 277],
			[202, 177],
			[251, 233],
			[305, 107],
			[230, 279],
			[243, 137],
			[74, 109],
			[56, 106],
			[258, 97],
			[248, 346],
			[71, 199],
			[332, 215],
			[208, 292],
			[154, 80],
			[74, 256],
			[325, 305],
			[174, 133],
			[148, 51],
			[112, 71],
			[243, 202],
			[136, 237],
			[227, 90],
			[191, 145],
			[345, 133],
			[340, 299],
			[322, 256],
			[86, 323],
			[341, 310],
			[342, 221],
			[50, 172],
			[284, 160],
			[267, 142],
			[244, 153],
			[131, 147],
			[245, 323],
			[42, 241],
			[90, 207],
			[245, 167],
			[335, 106],
			[299, 158],
			[181, 186],
			[349, 286],
			[327, 108]
		],
		out:3840
	}
];
