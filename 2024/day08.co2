
parse_input = (data) -> {
    local height = length(data);
    local width = length(get(data, 0));
    local groups = object();
    loop (local y=0,y<height,y=y+1)
    {
        local row=get(data, y);
        loop (local x=0,x<width,x=x+1)
        {
            local frequency=subseq(row,1,x);
            if ( (frequency==".") + (frequency=="#") ) continue;
            local group=get(groups, frequency);
            set(groups,frequency,{x:x,y:y,n:group});
        }
    }
    return {width:width, height:height, groups:groups, props:properties(groups)}
};

nodes_part1 = (width,height,nodes,a,b) -> {
    local dx = a.x-b.x;
    local dy = a.y-b.y;
    local x0 = a.x+dx;
    local y0 = a.y+dy;
    if ((x0>=0)*(x0<width)*(y0>=0)*(y0<height))
    {
        set(nodes, string(x0)+":"+string(y0), bit(1));
    }
};

nodes_part2 = (width,height,nodes,a,b) -> {
    local dx = a.x-b.x;
    local dy = a.y-b.y;
    local x = a.x;
    local y = a.y;
    loop ((x>=0)*(x<width)*(y>=0)*(y<height))
    {
        set(nodes, string(x)+":"+string(y), bit(1));
        x = x + dx;
        y = y + dy;
    }
};

count_nodes = (data, node_generator) -> {
    local parsed=parse_input(data);
    local width=parsed.width;
    local height=parsed.height;
    local nodes=object();
    loop (local i=0,i<length(parsed.props),i=i+1)
    {
        local groupname = get(parsed.props, i);
        local group = get(parsed.groups, groupname);
        loop ( local a=group,a!=void,a=a.n )
        {
            loop ( local b=a.n, b!=void, b=b.n )
            {
                node_generator(width,height,nodes,a,b);
                node_generator(width,height,nodes,b,a);
            }
        }
    }
    return length(properties(nodes));
};

part1 = (data) -> count_nodes(data, nodes_part1);
part2 = (data) -> count_nodes(data, nodes_part2);

basic_input = [
    "..........",
    "..........",
    "..........",
    "....a.....",
    "..........",
    ".....a....",
    "..........",
    "..........",
    "..........",
    "..........",
];

example_input = [
    "..........",
    "...#......",
    "#.........",
    "....a.....",
    "........a.",
    ".....a....",
    "..#.......",
    "......#...",
    "..........",
    "..........",
];

another_example = [
    "......#....#",
    "...#....0...",
    "....#0....#.",
    "..#....0....",
    "....0....#..",
    ".#....A.....",
    "...#........",
    "#......#....",
    "........A...",
    ".........A..",
    "..........#.",
    "..........#.",
];

puzzle_input = [
    ".......b..........................................",
    ".A....s...................3V...P....I.............",
    "..s.........b........v.P..................z.......",
    ".p..........A..uS.l...........................8...",
    ".......B...i...................z...............8..",
    ".............s..........E.......m........J........",
    ".c............L...k.P........E....................",
    "........b.....................a...................",
    ".m.s.....V....l....u...S..........O.............8.",
    "...B..............L..1Dm...S....u.z...............",
    "......A......3...e....f..a........................",
    "...................3.......I...............6.....8",
    "....v..l...................5..........I...........",
    "...v........k.0......5..P....z....................",
    ".....A....................VJ...T.......D..........",
    ".i..B..............L......W...........5...........",
    "...........p.....k............u.D..IX.............",
    "...c.......k..........VG.D.........W..............",
    "......i.c.....G....W........5....jJ...............",
    "...........l........................J....E........",
    "..........E..G..t.................................",
    "........i........h.................a....O........C",
    "......K..t.L........m...W......0..j...........2...",
    "................1.......j..0.......gC..M....2.....",
    ".........K............3...........M........U...g..",
    "..K.......p.....G.c...................q.....6.T...",
    "..................1h...............M..C...6f......",
    "............tj..h.......................f.........",
    "....................Y.h............O.........6.C..",
    "...........K....X....t......MfY..O....Q...........",
    "..............p.......0.................g.........",
    "..............n...............g...................",
    "....a..................................wQq.H.2....",
    ".o..................................v.....H..7.2..",
    "........N1..........F.......q....Yw.........H.....",
    "...n..d....H..F....................Y.......e......",
    "...................d..............................",
    "..y....N.....d..Z......9..........................",
    ".N......T.n................497....................",
    ".y....o....Z.........x.............T.............Q",
    ".......y...X.........9..................7....Q....",
    "...............F......................e...........",
    ".n...............F.Z..........................e...",
    "......................9U..............w...........",
    "o.......y...................4.U...................",
    "..x..............X.........w..4.............7.....",
    ".......oZ...d.....................x...............",
    ".............qU...................................",
    "..................................................",
    "..................................................",
];

basic_input_part_2 = [
    "T....#....",
    "...T......",
    ".T....#...",
    ".........#",
    "..#.......",
    "..........",
    "...#......",
    "..........",
    "....#.....",
    "..........",
];

cases = [
    { fn:part1, in:basic_input, out:2 },
    { fn:part1, in:example_input, out:4 },
    { fn:part1, in:another_example, out:14 },
    { fn:part1, in:puzzle_input, out:390 },
    { fn:part2, in:basic_input_part_2, out:9 },
    { fn:part2, in:puzzle_input, out:1246 },
];
