
map = function(data, fun, context){
    local result = array(length(data));
    loop(local i = 0, i < length(data), i = i + 1){
        set(result, i, fun(get(data, i),i,context));
    };
    return result;
};

apply = function(fun, data, context){
    local len = length(data);
    loop(local i = 0, i < len, i = i + 1){
        fun(get(data, i),i,context);
    };
};

filter = function(data, fun, context){
    local count = 0;
    local result = array(length(data));
    loop(local i = 0, i < length(data), i = i + 1){
        local item = get(data,i);
        if (fun(item, context)){
            set(result, count, item);
            count = count + 1;
        };
    };
    return head(result, count);
};

reduce = function(data, fun, initial, context){
    local value = initial;
    loop(local i = 0, i < length(data), i = i + 1){
        local item = get(data,i);
        value = fun(item, value, context);
    };
    return value;
};

find = function(data, fun, context){
    loop(local i = 0, i < length(data), i = i + 1){
        local item = get(data,i);
        if (fun(item, context)){
            return item;
        };
    };
    return void;
};

range = function(start, count){
    if (void == count){
        count = start;
        start = 0;
    }
    local data = array(count);
    loop(local i = 0, i < count, i = i + 1){
        set(data, i, start + i);
    };
    return data;
};

equals = function(a, b){
    return a == b;
};

_deprecated_subseq = subseq;

subseq = function(seq, index, count){
    return _deprecated_subseq(seq, count, index);
};

identity = x -> x;

false = bit(0);
true = bit(1);

strsplit = function(str, chars, keepEmpty){
    local result = 0;
    local count = 0;
    local pos = 0;
    if (void == keepEmpty){
        keepEmpty = false;
    }
    result = array(length(str));
    loop(local i=0, i<length(str), i=i+1){
        local value = 0;
        value = get(str, i);
        loop(local j=0, j<length(chars), j=j+1){
            if (value == get(chars,j)){
                if (keepEmpty + (i-pos > 0))
                {
                    set(result, count, subseq(str, pos, i-pos));
                    count = count + 1;
                }
                pos = i+1;
            };
        };
    };
    if (pos<length(str)){
        set(result, count, subseq(str, pos, length(str)-pos));
        count = count + 1;
    }
    return head(result,count);
};

sort = function(data, criteria){
    if (criteria == void) { criteria = function(a,b){ return a<b } };
    local len = length(data);
    data = head(data,len);
    loop (local i=0, i<len, i=i+1){
        local ith = get(data, i);
        local minindex = i;
        local min = ith;
        loop (local j=i+1, j<len, j=j+1){
            local jth = get(data,j);
            if (criteria(jth, min)){
                min = jth;
                minindex = j;
            }
        };
        if (minindex != i){
            set(data, i, min);
            set(data, minindex, ith);
        }
    };
    return data;
};

order = function(data, fieldSelector){
    return sort(data, (function(a,b){return fieldSelector(a) < fieldSelector(b)}));
};

groupby = function(data, fun, context){
    local len = length(data);
    local result = object();
    loop(local i=0, i<len, i=i+1){
        local item = get(data, i);
        local key = fun(item, context);
        local list_item = array(1);
        set(list_item,0,item);
        local list = get(result, key);
        if (list == void){
            set(result, key, list_item);
        } else {
            set(result, key, list + list_item);
        }
    };
    return result;
};

group = groupby;

distinct = function(data, fun, context){
    if (fun == void){
        fun = function(x){return string(x)};
    }
    local grouped = groupby(data, fun);
    return map(properties(grouped), (function(key){
        get(get(grouped,key),0);
    }));
};

foreach = function(container, fun, context){
    local keys = void;
    if (type(container) == "object"){
        keys = properties(container);
    } else {
        keys = range(length(container));
    };
    loop(local i=0, i<length(keys), i=i+1){
        local key = get(keys, i);
        fun(key, get(container, key), context);
    }
};

intcode = function(memory, input){
        
    local input_ptr = 0;
    local output = array(256);
    local output_ptr = 0;

    local opcode = 0;
    local instr_length = 0;

    local halt = false;
    local i_ptr = 0;
    local param_mode = array(3);
    local param_raw = array(3);
    local param_value = array(3);

    local instr_length_table = [1,4,4,2,2,3,3,4,4];
    local instr_length_table_length = length(instr_length_table);

    local decode_opcode = function (instruction){
        local d2 = instruction/100;
        local d3 = instruction/1000;
        local d4 = instruction/10000;
        opcode = instruction - d2*100;
        set(param_mode, 0, d2 - d3*10);
        set(param_mode, 1, d3 - d4*10);
        set(param_mode, 2, d4);
        if (opcode < instr_length_table_length){
            instr_length = get(instr_length_table, opcode);
        } else {
            instr_length = 1;
        };
    };


    local decode_parameter = function(memory, i_ptr, index){
        if (instr_length <= index+1) return true;
        local value = get(memory, i_ptr + 1 + index);
        set(param_raw, index, value);
        if (get(param_mode, index) == 1){
            set(param_value, index, value);
        } else {
            set(param_value, index, get(memory, value));
        }
        return false;
    };

    local decode_parameters = function (memory, i_ptr){
        if (decode_parameter(memory, i_ptr, 0)) return;
        if (decode_parameter(memory, i_ptr, 1)) return;
        if (decode_parameter(memory, i_ptr, 2)) return;
    };
    
    local invalid_instruction = function(opcode){
        view("invalid instruction opcode", opcode);
        exit(1);
    };

    local i_vector = map(range(0,100), opcode -> _ -> invalid_instruction(opcode));

    local instruction_arithmetic = function(arithmetic_function){
        local a = get(param_value, 0);
        local b = get(param_value, 1);
        local result = arithmetic_function(a,b);
        set(param_value, 2, result);
        set(memory, get(param_raw,2), result);
    };

    local arithmetic_add = function(a,b) { return a + b; };
    local arithmetic_mul = function(a,b) { return a * b; };
    local arithmetic_less = function(a,b) { if (a < b) return 1; return 0; };
    local arithmetic_equals = function(a,b) { if (a == b) return 1; return 0; };

    local instruction_read_input = function(){
        local value =  get(input, input_ptr);
        set(memory, get(param_raw, 0), value);
        input_ptr = input_ptr + 1;
    };

    local instruction_write_output = function(){
        local value = get(param_value, 0);
        set(output, output_ptr, value);
        output_ptr = output_ptr + 1;
    };

    local instruction_jump = function(condition_function){
        local a = get(param_value, 0);
        local b = get(param_value, 1);
        if (condition_function(a)){
            i_ptr = b;
        }
    };

    local instruction_halt = function(){
        halt = true;
    };

    set(i_vector, 1, _ -> instruction_arithmetic(arithmetic_add));
    set(i_vector, 2, _ -> instruction_arithmetic(arithmetic_mul));
    set(i_vector, 3, instruction_read_input);
    set(i_vector, 4, instruction_write_output);
    set(i_vector, 5, _ -> instruction_jump(x -> x != 0));
    set(i_vector, 6, _ -> instruction_jump(x -> x == 0));
    set(i_vector, 7, _ -> instruction_arithmetic(arithmetic_less));
    set(i_vector, 8, _ -> instruction_arithmetic(arithmetic_equals));
    set(i_vector, 99, instruction_halt);

    loop (halt == false) {
        local raw_opcode = get(memory, i_ptr);
        decode_opcode(raw_opcode);
        decode_parameters(memory, i_ptr);
        i_ptr = i_ptr + instr_length;
        local execute_instruction = get(i_vector, opcode);
        execute_instruction();
    }
    local result = subseq(output, 0, output_ptr);
    return result;
};
